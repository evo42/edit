<?php

/**
 * Implements hook_menu()
 */
function edit_aloha_menu() {
  $items = array();
  $items['alohaeditor/lookup/%'] = array(
      'page callback' => 'edit_alohaeditor_link_lookup',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function edit_aloha_library() {
  if (!in_array('alohaeditor', array_keys(libraries_get_libraries()))) {
    // Display a message when aloha is not found.
    drupal_set_message(check_plain(t('You need to download !aloha and extract the entire contents of the archive into the %path folder of your server.', array('!aloha' => l(t('Aloha Editor'), 'http://www.aloha-editor.org/'), '%path' => 'sites/all/libraries/alohaeditor'))), 'error', FALSE);
    return FALSE;
  }

  // @TODO: update this based on the input format settings. However, Aloha does
  // not support multiple configurations and does not have a clear, unified way
  // to deal with a list of allowed tags, so we'll need to figure that out with
  // the Aloha Editor developers.
  $plugins_list = array(
    'list' => drupal_map_assoc(array(
      'common/ui',
      'common/format',
      'common/align',
      'common/commands',
      'common/contenthandler',
      'common/paste',
      'common/list',
      'common/link',
      'extra/drupal',
    )),
  );
  $plugins_activated = '';
  if ($plugins_list) {
    foreach ($plugins_list['list'] as $key => $plugin) {
      if ($plugin == $key && !$plugin == '0') {
        $plugins_activated .= $plugin . ',';
      }
    }
  }
  if (substr($plugins_activated, -1) == ',') {
    $plugins_activated = substr($plugins_activated, 0, -1);
  }

  $aloha_settings = array(
    'baseUrl' => file_create_url(libraries_get_path('alohaeditor') .'/aloha/lib'),
    'plugins' => array(
      'load' => $plugins_activated,
      'format' => array('config' => array('strong', 'em', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre', 'removeFormat')),
      'list' => array('config' => array('ul', 'ol')),
      'contentHandler' => array('handler' => array( 'generic' => array('transformFormattings' => false)),
    ),
  );
  $aloha_path = libraries_get_path('alohaeditor');
  // The WYSIWYG files themselves (".wysiwyg").
  $libraries['edit_aloha.wysiwyg'] = array(
    'title' => 'Edit: Aloha Editor',
    'website' => 'http://aloha-editor.org/',
    'version' => NULL, // @TODO Figure out the correct way to do this.
    'js' => array(
      $aloha_path . '/aloha/lib/require.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -1001,
        'defer' => TRUE,
      ),
      $aloha_path . '/aloha/lib/aloha.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -1000,
        'defer' => TRUE,
        'attributes' => array(
            'data-aloha-defer-init' => 'true'
        ),
      ),
    ),
    'css' => array(
      libraries_get_path('alohaeditor') . '/aloha/css/aloha.css',
    ),
  );
  // Edit integration (".edit").
  $libraries['edit_aloha.edit'] = array(
    'title' => 'Edit: Aloha Editor integration',
    'website' => 'http://drupal.org/project/edit',
    'version' => NULL, // @TODO Figure out the correct way to do this.
    'js' => array(
      drupal_get_path('module', 'edit_aloha') . '/js/edit_aloha.js' => array(
        'defer' => TRUE,
        'weight' => 100,
      ),
      /* // Drupal AE plugin
      drupal_get_path('module', 'edit_aloha') . '/aloha/drupal/lib/drupal-plugin.js' => array(
        'defer' => false,
        'weight' => 101,
      ),
      drupal_get_path('module', 'edit_aloha') . '/aloha/drupal/lib/repository.js' => array(
          'defer' => false,
          'weight' => 102,
      ),
      drupal_get_path('module', 'edit_aloha') . '/aloha/drupal/lib/drupalcontenthandler.js' => array(
            'defer' => false,
            'weight' => 103,
      ),
      */
      // Configure Edit's JS to use edit_aloha as the WYSIWYG.
      array(
        'data' => array('edit' => array(
          'wysiwyg' => 'edit_aloha',
          'settings' => $aloha_settings,
        )),
        'type' => 'setting',
      ),
    ),
    'dependencies' => array(
      array('edit_aloha', 'edit_aloha.wysiwyg'),
    ),
  );

  return $libraries;
}

// @TODO: use this + refactor
function _edit_wysiwyg_tag_to_aloha_plugin($tag) {
  // format plugin
  $format_plugin_tags = array(
    'strong', 'em', 'p', 'sub', 'sup', 'del', 'title',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre'
  );
  if (in_array($tag, $format_plugin_tags)) {
    return 'format';
  }
  // list plugin (not explicitly present in Aloha: li)
  if (in_array($tag, array('ul', 'ol', 'li'))) {
    return 'list';
  }
  // table plugin (not explicitly present in Aloha: td, tr, thead, tbody)
  if (in_array($tag, array('table', 'td', 'tr', 'thead', 'tbody'))) {
    return 'table';
  }

  return FALSE;
}

/**
 * Implements API for AE - Drupal link repository
 */
function edit_alohaeditor_link_lookup($lookup = false) {
	$lookup = check_plain($lookup);

	$search_results = node_search_execute($lookup);
	//watchdog('aloha editor', 'search results: '.print_r($search_results, true));

	if (is_array($search_results) && empty($search_results[0])) {
		$search_results = false;
	}

	header('Content-Type:text/javascript');
	if (is_array($search_results)) {
		$out = '[';
		foreach ($search_results as $result) {
			$out .= '{"u":"'.$result['link'].'","d":"'.$result['title'].'","a":"","t":[""],"dt":"","n":""},';
		}
		$out = substr($out, 0, -1);
		$out .= ']';
		echo $out;
	} else {
		echo '[]';
	}
}
